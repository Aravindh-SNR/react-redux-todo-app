{"version":3,"sources":["components/Todos.js","actions/todoActions.js","components/AddTodo.js","components/ToggleStatus.js","App.js","serviceWorker.js","reduxStore.js","reducers/reduxReducer.js","index.js"],"names":["connect","state","view","todos","filter","todo","completed","dispatch","toggleStatus","type","payload","deleteTodo","message","id","todoList","length","map","className","key","task","title","onClick","addTodo","useState","setTodo","onSubmit","event","preventDefault","trim","value","onChange","target","toggleView","App","props","Boolean","window","location","hostname","match","store","createStore","action","newTodo","newTodos","index","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa66635b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {toggleStatus, deleteTodo} from '../actions/todoActions';\r\n\r\nconst Todos = ({todos, view, toggleStatus, deleteTodo}) => {\r\n\r\n    //message to be displayed when there are no todo items\r\n    const message = view === 'completed' ? <p id=\"no_todo\">Nothing here, please check the pending tasks.</p>\r\n                                         : <p id=\"no_todo\">You have nothing to do, yay!</p>\r\n\r\n    //creating an array of all the todo items to be displayed\r\n    const todoList = todos.length ?\r\n    todos.map(todo => \r\n    <div className=\"todo\" key={todo.id}>\r\n        <span>{todo.task}</span>\r\n        <button title=\"Click to update status\" onClick={() => {toggleStatus(todo)}} className={`completed_${todo.completed}`}>&#10003;</button>\r\n        <button title=\"Click to delete\" onClick={() => {deleteTodo(todo)}}>x</button>\r\n    </div>) \r\n    : message;\r\n    \r\n    return (\r\n        <div className=\"todos\">\r\n            {todoList}\r\n        </div>\r\n    );\r\n}\r\n\r\n//getting data from the redux store\r\n//the todo items requested depend on the view(all/completed/pending)\r\nconst mapStateToProps = state => {\r\n    switch(state.view) {\r\n        case 'completed': return {\r\n            todos: state.todos.filter(todo => todo.completed),\r\n            view: state.view\r\n        }\r\n\r\n        case 'pending': return {\r\n            todos: state.todos.filter(todo => !todo.completed),\r\n            view: state.view\r\n        }\r\n\r\n        default: return {\r\n            todos: state.todos,\r\n            view: state.view\r\n        }\r\n    }\r\n  }\r\n\r\n//dispatching actions to be performed by the redux reducer, the actions here are:\r\n//deleting a todo item from the state in the redux store\r\n//and toggling the status of a todo item (completed/pending)\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        toggleStatus: (todo) => dispatch(toggleStatus(todo)),\r\n        deleteTodo: (todo) => dispatch(deleteTodo(todo))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);","//action to add a todo item\r\nexport const addTodo = (todo) => {\r\n    return {\r\n        type: 'ADD_TODO',\r\n        payload: todo\r\n    }\r\n}\r\n\r\n//action to delete a todo item\r\nexport const deleteTodo = (todo) => {\r\n    return {\r\n        type: 'DELETE_TODO',\r\n        payload: todo\r\n    }\r\n}\r\n\r\n//action to toggle the value of 'completed' on a todo item, the value will be either true or false\r\nexport const toggleStatus = (todo) => {\r\n    return {\r\n        type: 'TOGGLE_STATUS',\r\n        payload: todo\r\n    }\r\n}\r\n\r\n//action to toggle the view based on the user input\r\n//the user can see all the items or just the completed or pending items\r\nexport const toggleView = (view) => {\r\n    return {\r\n        type: 'TOGGLE_VIEW',\r\n        payload: view\r\n    }\r\n}","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {addTodo} from '../actions/todoActions';\r\n\r\nconst AddTodo = ({addTodo}) => {\r\n\r\n    const [todo, setTodo] = useState('');\r\n\r\n    //setting the value of the todo item entered as this component's state\r\n    const handleChange = (event) => {\r\n        setTodo(event.target.value);\r\n    }\r\n\r\n    //adding the todo item to the state in the redux store\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const task = todo.trim();\r\n        if(task.length > 0) {\r\n            addTodo(task);\r\n            setTodo('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"add_todo\">\r\n            <form onSubmit={handleSubmit}>\r\n                <label>Add a task: </label>\r\n                <input type=\"text\" value={todo} onChange={handleChange}/>\r\n                <button>Add todo</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n//dispatching the action of adding the todo item to the state in the redux store\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addTodo: (todo) => dispatch(addTodo(todo))\r\n    };\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AddTodo);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {toggleView} from '../actions/todoActions'\r\n\r\nconst ToggleStatus = ({view, toggleView}) => {\r\n    //buttons with event handlers for each view - the view is either 'all' or 'completed' or 'pending'\r\n    return (\r\n        <div className=\"toggle_status\">\r\n            <button id=\"all\" className={view} onClick={() => {toggleView('all')}}>All</button>\r\n            <button id=\"completed\" className={view} onClick={() => {toggleView('completed')}}>Completed</button>\r\n            <button id=\"pending\" className={view} onClick={() => {toggleView('pending')}}>Pending</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n//getting the current view from the redux store's state\r\nconst mapStateToProps = state => {\r\n    return {\r\n        view: state.view\r\n    };\r\n}\r\n\r\n//toggling the view, i.e. modifying the view in the redux store's state by dispatching an action\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        toggleView: (view) => dispatch(toggleView(view))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToggleStatus);","import React from 'react';\r\nimport Todos from './components/Todos';\r\nimport AddTodo from './components/AddTodo';\r\nimport ToggleStatus from './components/ToggleStatus';\r\n\r\nfunction App(props) {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Todo list</h1>\r\n      </header>\r\n      <main>\r\n        <section>\r\n          <Todos/> {/* section to display all the todo items */}\r\n        </section>\r\n        <section>\r\n          <AddTodo/> {/* form to add new todo items */}\r\n        </section>\r\n        <section>\r\n          <p className=\"status_heading\">Track tasks by status</p>\r\n          <ToggleStatus/> {/* section to toggle view and see todo items based on their completion status */}\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from 'redux';\r\nimport {reducer} from './reducers/reduxReducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","export const reducer = (state = {todos: [], view: ''}, action) => {\r\n    switch(action.type) {\r\n\r\n        //adding a new todo item to the state\r\n        case 'ADD_TODO': {\r\n            const newTodo = {id: state.todos.length + 1, task: action.payload, completed: false};\r\n            return {\r\n                todos: [...state.todos, newTodo],\r\n                view: state.view\r\n            };\r\n        }\r\n\r\n        //deleting a todo item from the state and assigning ids again to the rest of the items\r\n        //in order to avoid duplication of ids on further addition of items\r\n        case 'DELETE_TODO': {\r\n            const newTodos = state.todos.filter(todo => todo.id !== action.payload.id).map((todo, index) => {\r\n                todo.id = index + 1;\r\n                return todo;\r\n            })\r\n            return {\r\n                todos: newTodos,\r\n                view: state.view\r\n            };\r\n        }\r\n\r\n        //toggling the value of 'completed' on the selected todo item - the value is either true or false\r\n        case 'TOGGLE_STATUS': {\r\n            return {\r\n                todos: [...state.todos.map(todo => {\r\n                    return todo.id === action.payload.id ? {\r\n                        id: todo.id,\r\n                        task: todo.task,\r\n                        completed: !todo.completed\r\n                    } : todo;\r\n                })],\r\n                view: state.view\r\n            };\r\n        }\r\n\r\n        //modifying the value of 'view' to the one selected by the user\r\n        case 'TOGGLE_VIEW': {\r\n            return {\r\n                todos: state.todos,\r\n                view: action.payload\r\n            };\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './reduxStore';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}